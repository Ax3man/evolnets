% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot.R
\name{plot_ancestral_states}
\alias{plot_ancestral_states}
\title{Plot ancestral states on the phylogeny.}
\usage{
plot_ancestral_states(
  tree,
  samples_at_nodes,
  modules,
  threshold = 0.9,
  point_size = 3,
  dodge_width = 0.025,
  legend = TRUE,
  colors = NULL
)
}
\arguments{
\item{tree}{The phylogeny, a \code{phylo} object.}

\item{samples_at_nodes}{A list of length 2, output from \code{posterior_at_nodes()}.}

\item{modules}{A \code{moduleWeb} or a \code{data.frame} object defining the models in the network.
If a \code{data.frame} is passed, it must contain three columns:
$name with taxon names,
$module with the module the taxon was assigned to, and
$type which defines if the taxon is a "host" or a "symbiont".}

\item{threshold}{The posterior probability above which the ancestral states should be shown.
Defaults to 90\% (\code{0.9}). Numeric vector of length 1.}

\item{point_size}{How large the ancestral state points should be, default at 3. Play with this
and \code{dodge_width} to get a pleasing result. Numeric vector of length 1.}

\item{dodge_width}{How far the points should be pushed apart, when there is multiple states at
a single node, default at 0.025. Play with this and \code{point_size} to get a pleasing result.
Numeric vector of length 1.}

\item{legend}{Whether to display a legend for the colors. Logical vector of length 1.}

\item{colors}{Override the default colors. Should be a character vector with as many color values
as there are modules.

The ancestral states are automatically colored by module. To change what colors are used, you
can add color scales to the resulting \code{ggplot}, e.g. \code{ggplot2::scale_color_manual()}.}
}
\value{
A \code{ggplot} object.
}
\description{
Plot ancestral states on the phylogeny.
}
\examples{
\dontrun{
  san <- posterior_at_nodes(history, 66 + 1:65, host_tree)
  mods <- mycomputeModules(extant_net)
  plot_ancestral_states(tree, san, mods)
  # Manual colors
  plot_ancestral_states(tree, san, mods, colors = rainbow(20))
}
}
